<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PRIDELIZIHAO&#39;S BOLG</title>
  
  <subtitle>一蓑烟雨任平生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-26T09:14:33.058Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>pridelizihao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DFS剪枝</title>
    <link href="http://example.com/posts/8c023b29/"/>
    <id>http://example.com/posts/8c023b29/</id>
    <published>2025-01-26T09:11:49.722Z</published>
    <updated>2025-01-26T09:14:33.058Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS剪枝简介"><a href="#DFS剪枝简介" class="headerlink" title="DFS剪枝简介"></a>DFS剪枝简介</h1><p>DFS剪枝是一种启发式搜索算法，它通过对搜索树进行剪枝，来减少搜索树的大小，从而减少搜索时间。</p><p>DFS剪枝的基本思想是，在搜索树的每一步，都要判断是否可以直接跳过某些分支，从而减少搜索树的大小。</p><p>具体来说，DFS剪枝有以下几种方法：</p><ol><li><p>剪枝准则：在搜索树的每一步，都要判断是否可以直接跳过某些分支，从而减少搜索树的大小。</p></li><li><p>启发式函数：启发式函数是指对节点的评估函数，它可以帮助搜索算法更好地选择下一步要探索的节点。</p></li><li><p>代价估计：代价估计是指估计节点的代价，并据此来判断是否应该继续探索该节点的子节点。</p></li><li><p>动态规划：动态规划是指利用搜索树的结构性质，对搜索树进行预处理，从而减少搜索树的大小。</p></li><li><p>启发式搜索：启发式搜索是指利用启发式函数对搜索树进行排序，从而减少搜索树的大小。</p></li><li><p>备忘录：备忘录是指在搜索树的每一步，都记录下已经探索过的节点，从而减少搜索树的大小。</p></li><li><p>并行搜索：并行搜索是指在多线程或多进程环境下，对搜索树进行搜索，从而减少搜索树的大小。</p></li><li><p>剪枝策略：剪枝策略是指对搜索树进行剪枝，从而减少搜索树的大小。</p></li><li><p>多目标搜索：多目标搜索是指在搜索树的每一步，都要同时考虑多个目标，从而减少搜索树的大小。</p></li></ol><h1 id="实例一：学生分队问题"><a href="#实例一：学生分队问题" class="headerlink" title="实例一：学生分队问题"></a>实例一：学生分队问题</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>数字王国开学了，它们也和我们人类一样有开学前的军训，现在一共有 n 名学生，每个学生有自己的一个名字 ai<br>​<br>（数字王国里的名字就是一个正整数，注意学生们可能出现重名的情况），此时叛逆教官来看了之后感觉十分别扭，决定将学生重新分队。</p><p>排队规则为：将学生分成若干队，每队里面至少一个学生，且每队里面学生的名字不能出现倍数关系（注意名字相同也算是倍数关系）。</p><p>现在请你帮忙算算最少可以分成几队？</p><p>例：有 4 名学生 (2,3,4,4)，最少可以分成 (2,3)、(4)、(4) 共 3 队。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">x, group</span>):</span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> group:</span><br><span class="line">        <span class="keyword">if</span> y % x == <span class="number">0</span> <span class="keyword">or</span> x % y == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">depth</span>):</span><br><span class="line">    <span class="comment"># 最优解的剪枝</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    <span class="comment"># 如果当前分组状态已经比ans大，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(Groups) &gt; ans:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当前是第depth层</span></span><br><span class="line">    <span class="keyword">if</span> depth == n:</span><br><span class="line">        <span class="keyword">global</span> ans</span><br><span class="line">        ans = <span class="built_in">min</span>(ans, <span class="built_in">len</span>(Groups))</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 每个学生的基础操作</span></span><br><span class="line">    <span class="comment"># 遍历每个分组</span></span><br><span class="line">    <span class="keyword">for</span> every_group <span class="keyword">in</span> Groups:</span><br><span class="line">        <span class="comment"># 可行性剪枝</span></span><br><span class="line">        <span class="keyword">if</span> check(a[depth], every_group):</span><br><span class="line">            every_group.append(a[depth])</span><br><span class="line">            dfs(depth+<span class="number">1</span>)</span><br><span class="line">            every_group.pop()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 单独作为一组</span></span><br><span class="line">    Groups.append([a[depth]])</span><br><span class="line">    dfs(depth+<span class="number">1</span>)</span><br><span class="line">    Groups.pop()        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"><span class="comment"># 学生分组,每个元素是一个列表，表示一个分组</span></span><br><span class="line">Groups = []</span><br><span class="line">ans = n</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">DFS剪枝</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="DFS" scheme="http://example.com/tags/DFS/"/>
    
    <category term="剪枝" scheme="http://example.com/tags/%E5%89%AA%E6%9E%9D/"/>
    
  </entry>
  
  <entry>
    <title>DFS回溯</title>
    <link href="http://example.com/posts/d054201b/"/>
    <id>http://example.com/posts/d054201b/</id>
    <published>2025-01-17T08:00:00.000Z</published>
    <updated>2025-01-17T13:01:57.767Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回溯法求排列数"><a href="#回溯法求排列数" class="headerlink" title="回溯法求排列数"></a>回溯法求排列数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">depth</span>):</span><br><span class="line">    <span class="comment"># depth: 当前深度</span></span><br><span class="line">    <span class="keyword">if</span> depth == n:</span><br><span class="line">        <span class="comment"># 到达叶子节点，输出路径</span></span><br><span class="line">        <span class="built_in">print</span>(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择范围</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 已经访问过的节点，跳过</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> vis[i]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 符合条件的节点，加入路径</span></span><br><span class="line">        vis[i] = <span class="literal">True</span></span><br><span class="line">        path.append(i)</span><br><span class="line">        dfs(depth+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 回溯的时候，将当前节点从路径中移除</span></span><br><span class="line">        vis[i] = <span class="literal">False</span></span><br><span class="line">        path.pop(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">vis = [<span class="literal">False</span>] * (n+<span class="number">1</span>)</span><br><span class="line">path = []</span><br><span class="line">dfs(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="回溯法求子集"><a href="#回溯法求子集" class="headerlink" title="回溯法求子集"></a>回溯法求子集</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">path = []</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">depth</span>):</span><br><span class="line">    <span class="keyword">if</span> depth == n:</span><br><span class="line">        <span class="built_in">print</span>(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择当前节点</span></span><br><span class="line">    path.append(a[depth])</span><br><span class="line">    dfs(depth+<span class="number">1</span>)</span><br><span class="line">    path.pop(-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 不选择当前节点</span></span><br><span class="line">    dfs(depth+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><h1 id="1508N皇后问题"><a href="#1508N皇后问题" class="headerlink" title="1508N皇后问题"></a>1508N皇后问题</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>在 N×N 的方格棋盘放置了 N 个皇后，使得它们不相互攻击（即任意 2 个皇后不允许处在同一排，同一列，也不允许处在与棋盘边框成 45 角的斜线上。你的任务是，对于给定的 N，求出有多少种合法的放置方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span> (x):</span><br><span class="line">    <span class="keyword">if</span> x == n + <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">global</span> ans</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 枚举每一列</span></span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 当前坐标(x,y)</span></span><br><span class="line">        <span class="keyword">if</span> vis1[y] <span class="keyword">or</span> vis2[x+y] <span class="keyword">or</span> vis3[x-y+n]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 标记当前坐标</span></span><br><span class="line">        vis1[y] = <span class="literal">True</span></span><br><span class="line">        vis2[x+y] = <span class="literal">True</span></span><br><span class="line">        vis3[x-y+n] = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">        dfs(x+<span class="number">1</span>)</span><br><span class="line">        <span class="comment"># 回溯</span></span><br><span class="line">        vis1[y] = <span class="literal">False</span></span><br><span class="line">        vis2[x+y] = <span class="literal">False</span></span><br><span class="line">        vis3[x-y+n] = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">vis1 = [<span class="literal">False</span>]*(n+<span class="number">1</span>)</span><br><span class="line">vis2 = [<span class="literal">False</span>]*(<span class="number">2</span>*n+<span class="number">1</span>)</span><br><span class="line">vis3 = [<span class="literal">False</span>]*(<span class="number">2</span>*n+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">dfs(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><h1 id="小朋友崇拜圈"><a href="#小朋友崇拜圈" class="headerlink" title="小朋友崇拜圈"></a>小朋友崇拜圈</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>班里 N 个小朋友，每个人都有自己最崇拜的一个小朋友（也可以是自己）。</p><p>在一个游戏中，需要小朋友坐一个圈，每个小朋友都有自己最崇拜的小朋友在他的右手边。</p><p>求满足条件的圈最大多少人？</p><p>小朋友编号为 1,2,3,⋯N</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 走到x位置，当前长度为length</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">x, length</span>):</span><br><span class="line">    vis[x] = length</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment"># 走到下一个点</span></span><br><span class="line">    <span class="comment"># 判断是否走过</span></span><br><span class="line">    <span class="keyword">if</span> vis[a[x]] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">global</span> ans</span><br><span class="line">        <span class="comment"># 此时存在环</span></span><br><span class="line">        ans = <span class="built_in">max</span>(ans, length-vis[a[x]]+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        dfs(a[x], length+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a = [<span class="number">0</span>] + <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">vis = [<span class="number">0</span>] * (n+<span class="number">1</span>)  <span class="comment"># 表示步长</span></span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> vis[i] == <span class="number">0</span>:</span><br><span class="line">        dfs(i, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure><ul><li>记得扩栈</li></ul><h1 id="全球变暖"><a href="#全球变暖" class="headerlink" title="全球变暖"></a>全球变暖</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>你有一张某海域 NxN 像素的照片，”.”表示海洋、”#”表示陆地，如下所示：</p><p>…….</p><p>.##….</p><p>.##….</p><p>….##.</p><p>..####.</p><p>…###.</p><p>…….</p><p>其中”上下左右”四个方向上连在一起的一片陆地组成一座岛屿。例如上图就有 2 座岛屿。</p><p>由于全球变暖导致了海面上升，科学家预测未来几十年，岛屿边缘一个像素的范围会被海水淹没。具体来说如果一块陆地像素与海洋相邻(上下左右四个相邻像素中有海洋)，它就会被淹没。</p><p>例如上图中的海域未来会变成如下样子：</p><p>…….</p><p>…….</p><p>…….</p><p>…….</p><p>….#..</p><p>…….</p><p>…….</p><p>请你计算：依照科学家的预测，照片中有多少岛屿会被完全淹没</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">sys.setrecursionlimit(<span class="number">1000000</span>)  <span class="comment"># 递归深度限制</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">i, j</span>):</span><br><span class="line">    <span class="comment"># 当前处于(i,j)位置，标记为已访问</span></span><br><span class="line">    vis[i][j] = <span class="literal">True</span></span><br><span class="line">    <span class="comment"># 四个方向进行DFS</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">map</span>[i][j-<span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="built_in">map</span>[i][j+<span class="number">1</span>] == <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="built_in">map</span>[i-<span class="number">1</span>][j] == <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="built_in">map</span>[i+<span class="number">1</span>][j] == <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">        <span class="keyword">global</span> flag</span><br><span class="line">        flag = <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 扩展，把相邻的点打上标记</span></span><br><span class="line">    <span class="keyword">for</span> (dx, dy) <span class="keyword">in</span> [(<span class="number">0</span>, <span class="number">1</span>), (<span class="number">0</span>, -<span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>), (-<span class="number">1</span>, <span class="number">0</span>)]:</span><br><span class="line">        x = i + dx</span><br><span class="line">        y = j + dy</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">map</span>[x][y] == <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> vis[x][y]:</span><br><span class="line">            dfs(x, y)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span> = []</span><br><span class="line"></span><br><span class="line">vis = []  <span class="comment"># 记录是否访问过</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">map</span>.append(<span class="built_in">list</span>(<span class="built_in">input</span>()))</span><br><span class="line">    vis.append([<span class="literal">False</span>] * n)</span><br><span class="line"></span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">map</span>[i][j] == <span class="string">&#x27;#&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> vis[i][j]:</span><br><span class="line"></span><br><span class="line">            flag = <span class="number">0</span></span><br><span class="line">            dfs(i, j)</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                ans += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">DFS回溯</summary>
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="DFS" scheme="http://example.com/tags/DFS/"/>
    
    <category term="回溯" scheme="http://example.com/tags/%E5%9B%9E%E6%BA%AF/"/>
    
  </entry>
  
  <entry>
    <title>java基础学习</title>
    <link href="http://example.com/posts/43ebcb2f/"/>
    <id>http://example.com/posts/43ebcb2f/</id>
    <published>2025-01-14T10:01:59.702Z</published>
    <updated>2025-01-17T02:25:53.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="源文件声明规则"><a href="#源文件声明规则" class="headerlink" title="源文件声明规则"></a>源文件声明规则</h1><ul><li>一个源文件中只能有一个 public 类</li><li>一个源文件中可以有多个非 public 类</li><li>源文件的名称应该和 public 类的类名保持一致。例如：源文件中 public 类的类名是 Employee，那么源文件应该命名为Employee.java。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Puppy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 构造器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Puppy</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗的名字是 : &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 设置 age 的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取 age 的值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 获取 name 的值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 主方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建对象</span></span><br><span class="line">        <span class="type">Puppy</span> <span class="variable">myPuppy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Puppy</span>(<span class="string">&quot;Tommy&quot;</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过方法来设定 age</span></span><br><span class="line">        myPuppy.setAge(<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 调用另一个方法获取 age</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> myPuppy.getAge();</span><br><span class="line">        System.out.println(<span class="string">&quot;小狗的年龄为 : &quot;</span> + age);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 也可以直接访问成员变量（通过 getter 方法）</span></span><br><span class="line">        System.out.println(<span class="string">&quot;变量值 : &quot;</span> + myPuppy.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="java基本数据类型"><a href="#java基本数据类型" class="headerlink" title="java基本数据类型"></a>java基本数据类型</h1><p>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</p><ul><li>byte：字节型，8位，有符号整数，范围-128~127。</li><li>short：短整型，16位，有符号整数，范围-32768~32767。</li><li>int：整型，32位，有符号整数，范围-2147483648~2147483647。</li><li>long：长整型，64位，有符号整数，范围-9223372036854775808~9223372036854775807。</li><li>float：单精度浮点型，32位，范围-3.40282347E+38~3.40282347E+38。</li><li>double：双精度浮点型，64位，范围-1.7976931348623157E+308~1.7976931348623157E+308。</li><li>char：字符型，16位，表示单个Unicode字符。</li><li>boolean：布尔型，只有两个值：true和false。</li></ul><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrimitiveTypeTest</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="comment">// byte  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：byte 二进制位数：&quot;</span> + Byte.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Byte&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Byte.MIN_VALUE=&quot;</span> + Byte.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Byte.MAX_VALUE=&quot;</span> + Byte.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// short  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：short 二进制位数：&quot;</span> + Short.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Short&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Short.MIN_VALUE=&quot;</span> + Short.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Short.MAX_VALUE=&quot;</span> + Short.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// int  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：int 二进制位数：&quot;</span> + Integer.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Integer&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Integer.MIN_VALUE=&quot;</span> + Integer.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Integer.MAX_VALUE=&quot;</span> + Integer.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// long  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：long 二进制位数：&quot;</span> + Long.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Long&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Long.MIN_VALUE=&quot;</span> + Long.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Long.MAX_VALUE=&quot;</span> + Long.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// float  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：float 二进制位数：&quot;</span> + Float.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Float&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Float.MIN_VALUE=&quot;</span> + Float.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Float.MAX_VALUE=&quot;</span> + Float.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// double  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：double 二进制位数：&quot;</span> + Double.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Double&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Double.MIN_VALUE=&quot;</span> + Double.MIN_VALUE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Double.MAX_VALUE=&quot;</span> + Double.MAX_VALUE);  </span><br><span class="line">        System.out.println();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// char  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：char 二进制位数：&quot;</span> + Character.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Character&quot;</span>);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最小值：Character.MIN_VALUE=&quot;</span>  </span><br><span class="line">                + (<span class="type">int</span>) Character.MIN_VALUE);  </span><br><span class="line">        <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;最大值：Character.MAX_VALUE=&quot;</span>  </span><br><span class="line">                + (<span class="type">int</span>) Character.MAX_VALUE);  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// boolean  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;基本类型：boolean 二进制位数：&quot;</span> + Boolean.SIZE);  </span><br><span class="line">        System.out.println(<span class="string">&quot;包装类：java.lang.Boolean&quot;</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;true 的数值：&quot;</span> + Boolean.TRUE.hashCode());  </span><br><span class="line">        System.out.println(<span class="string">&quot;false 的数值：&quot;</span> + Boolean.FALSE.hashCode());    </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><p>Java语言支持自动类型转换，即不同类型的数据可以相互转换。</p><h1 id="Java变量类型"><a href="#Java变量类型" class="headerlink" title="Java变量类型"></a>Java变量类型</h1><p>Java语言提供了以下几种变量类型：</p><ul><li>局部变量：在方法、构造器或代码块中声明的变量，只能在声明它们的区域内使用。</li><li>实例变量（成员变量）：在类的声明中声明的变量，可以被所有方法共享，包括方法体外。</li><li>类变量（静态变量）：用 static 关键字修饰的变量，被所有对象共享，静态变量在第一次被访问时被初始化。</li><li>常量：用 final 关键字修饰的变量，只能被赋值一次，常量可以是任何基本类型或引用类型。</li><li>参数变量</li></ul><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> instanceVar;</span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> staticVar;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(<span class="type">int</span> paramVar)</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用变量</span></span><br><span class="line">        instanceVar = localVar;</span><br><span class="line">        staticVar = paramVar;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;成员变量: &quot;</span> + instanceVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;静态变量: &quot;</span> + staticVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;参数变量: &quot;</span> + paramVar);</span><br><span class="line">        System.out.println(<span class="string">&quot;局部变量: &quot;</span> + localVar);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">RunoobTest</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunoobTest</span>();</span><br><span class="line">        v.method(<span class="number">20</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h2><p>Java 中的参数变量是指在方法或构造函数中声明的变量，用于接收传递给方法或构造函数的值。参数变量与局部变量类似，但它们只在方法或构造函数被调用时存在，并且只能在方法或构造函数内部使用。</p><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><p>Java 的局部变量是在方法、构造方法或语句块内部声明的变量，其作用域限制在声明它的代码块内部。</p><h2 id="成员变量（实例变量）"><a href="#成员变量（实例变量）" class="headerlink" title="成员变量（实例变量）"></a>成员变量（实例变量）</h2><p>成员变量（实例变量）是指在类的声明中声明的变量，可以被所有方法共享，包括方法体外。</p><h2 id="类变量（静态变量）"><a href="#类变量（静态变量）" class="headerlink" title="类变量（静态变量）"></a>类变量（静态变量）</h2><p>Java 中的静态变量是指在类中定义的一个变量，它与类相关而不是与实例相关，即无论创建多少个类实例，静态变量在内存中只有一份拷贝，被所有实例共享。<br>静态变量在类加载时被创建，在整个程序运行期间都存在。</p><h1 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h1><p>Java 修饰符用来控制成员（类、方法、变量）的访问权限、继承性、多态性等。</p><h2 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h2><ul><li>public：公共修饰符，可以被所有类访问，默认继承。</li><li>private：私有修饰符，只能被当前类访问。</li><li>protected：受保护修饰符，同包内的类可以访问，不同包的子类可以访问。</li><li>default：默认修饰符，同包内的类可以访问，不同包的子类不能访问。</li></ul><h2 id="非访问控制修饰符"><a href="#非访问控制修饰符" class="headerlink" title="非访问控制修饰符"></a>非访问控制修饰符</h2><ul><li>abstract：抽象修饰符，用来创建抽象类和抽象方法。</li><li>final：最终修饰符，用来修饰类、方法、变量，防止它们被继承、修改。</li><li>static：静态修饰符，用来创建静态成员。</li><li>synchronized：同步修饰符，用来在多线程环境下同步访问资源。</li><li>volatile：易失修饰符，用来在多线程环境下保证变量的可见性。</li><li>transient：瞬时修饰符，用来在序列化时忽略该变量。</li></ul><h1 id="Java运算符"><a href="#Java运算符" class="headerlink" title="Java运算符"></a>Java运算符</h1><p>Java 运算符是用来执行各种操作的符号。Java 运算符分为以下几类：</p><ul><li><p>算术运算符</p><p>用于执行基本的算术运算，如加减乘除、取模等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">25</span>;</span><br><span class="line">   System.out.println(<span class="string">&quot;a + b = &quot;</span> + (a + b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a - b = &quot;</span> + (a - b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a * b = &quot;</span> + (a * b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;b / a = &quot;</span> + (b / a) );</span><br><span class="line">   System.out.println(<span class="string">&quot;b % a = &quot;</span> + (b % a) );</span><br><span class="line">   System.out.println(<span class="string">&quot;c % a = &quot;</span> + (c % a) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a++   = &quot;</span> +  (a++) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a--   = &quot;</span> +  (a--) );</span><br><span class="line">   <span class="comment">// 查看  d++ 与 ++d 的不同</span></span><br><span class="line">   System.out.println(<span class="string">&quot;d++   = &quot;</span> +  (d++) );</span><br><span class="line">   System.out.println(<span class="string">&quot;++d   = &quot;</span> +  (++d) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关系运算符</p><p>用于比较两个值之间的关系，如大于、小于、等于、不等于等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">   <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">   System.out.println(<span class="string">&quot;a == b = &quot;</span> + (a == b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a != b = &quot;</span> + (a != b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a &gt; b = &quot;</span> + (a &gt; b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;a &lt; b = &quot;</span> + (a &lt; b) );</span><br><span class="line">   System.out.println(<span class="string">&quot;b &gt;= a = &quot;</span> + (b &gt;= a) );</span><br><span class="line">   System.out.println(<span class="string">&quot;b &lt;= a = &quot;</span> + (b &lt;= a) );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">java基础学习</summary>
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="java" scheme="http://example.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>dfs</title>
    <link href="http://example.com/posts/4a345649/"/>
    <id>http://example.com/posts/4a345649/</id>
    <published>2025-01-13T14:58:08.000Z</published>
    <updated>2025-01-13T15:01:09.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DFS基础"><a href="#DFS基础" class="headerlink" title="DFS基础"></a>DFS基础</h1><h2 id="DFS和n重循环"><a href="#DFS和n重循环" class="headerlink" title="DFS和n重循环"></a>DFS和n重循环</h2><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">depth</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    :param depth: 记录当前深度</span></span><br><span class="line"><span class="string">    :return </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> depth == N:</span><br><span class="line">      <span class="comment"># N重循环最内层执行的代码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="comment"># 结束条件</span></span><br><span class="line">    <span class="comment"># 每重循环进行的枚举选择</span></span><br></pre></td></tr></table></figure><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h4 id="1-打印相加为X的非严格递增n位序列"><a href="#1-打印相加为X的非严格递增n位序列" class="headerlink" title="1. 打印相加为X的非严格递增n位序列"></a>1. 打印相加为X的非严格递增n位序列</h4><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">dfs</span>(<span class="params">depth, last_value</span>):</span><br><span class="line">    <span class="comment">#depth:表示当前处于第depth层</span></span><br><span class="line">    <span class="comment">#递归入口</span></span><br><span class="line">    <span class="keyword">if</span> depth == n:</span><br><span class="line">        <span class="comment">#判断是否满足条件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">sum</span>(path) != x:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(path)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(last_value,x+<span class="number">1</span>):</span><br><span class="line">        path[depth] = i</span><br><span class="line">        dfs(depth+<span class="number">1</span>,i)</span><br><span class="line"></span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># path[i]表示第i个位置的值</span></span><br><span class="line">path = [<span class="number">0</span>]*n</span><br><span class="line"><span class="comment"># x = 6</span></span><br><span class="line"><span class="comment"># n = 3</span></span><br><span class="line"><span class="comment"># [0,0,0]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dfs(<span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">dfs简单讲述</summary>
    
    
    
    <category term="学习" scheme="http://example.com/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="dfs" scheme="http://example.com/tags/dfs/"/>
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>电子技术的作用</title>
    <link href="http://example.com/posts/1/"/>
    <id>http://example.com/posts/1/</id>
    <published>2025-01-13T10:29:00.000Z</published>
    <updated>2025-01-13T10:44:41.382Z</updated>
    
    <content type="html"><![CDATA[<h1 id="电子计技术对于计算机发展的推动——以中央处理器（CPU）为例"><a href="#电子计技术对于计算机发展的推动——以中央处理器（CPU）为例" class="headerlink" title="电子计技术对于计算机发展的推动——以中央处理器（CPU）为例"></a>电子计技术对于计算机发展的推动——以中央处理器（CPU）为例</h1><p><strong>摘要</strong>：随着电子技术的不断创新和进步，计算机的性能和功能得到了进一步的发展。本文聚焦于计算机的中央处理器（CPU），通过阐述其随着电子技术发展而产生的变化历程，深入剖析电子技术对计算机硬件发展的推动作用，展现二者紧密的关联及电子技术的重要影响力。</p><p><strong>关键词</strong>：电子技术，CPU，集成电路，芯片，算力，人工智能，机器学习，大数据</p><h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>计算机作为现代社会不可或缺的工具，其性能的不断提升得益于硬件的持续发展。而在众多计算机硬件部件中，中央处理器（CPU）无疑起着核心作用，它的发展演变与电子技术的进步息息相关，电子技术的每一次突破都为 CPU 的性能提升带来了新的契机。其中，也诞生了计算机历史上比较著名的定理，如摩尔定理，即每过 18 个月，中央处理器（CPU）的价格下降一半，性能提高一倍。</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="电子技术发展初期和早期-CPU"><a href="#电子技术发展初期和早期-CPU" class="headerlink" title="电子技术发展初期和早期 CPU"></a>电子技术发展初期和早期 CPU</h3><p>在电子技术发展的早期阶段，那时主要采用电子管技术。世界上第一台通用计算机 ENIAC 便是以电子管作为基础元件构建其 CPU 等部件的。电子管体积庞大、能耗极高且容易损坏，这使得当时的 CPU 运算速度慢、处理能力有限，计算机整体体积也十分巨大，只能应用于一些特定的科研等领域。不过，电子管的出现也开启了利用电子技术打造计算机核心部件的大门，为后续发展奠定了基础。自从世纪的计算机创立之后，无论是作为一门学科还是一种器件，计算机的作用都巨大，有着 21 世纪工业奇迹的美誉，这当然要归功于电子管技术向晶体管技术发展，使得电子计算机不断小型化，家庭化。</p><p>第一代电子计算机采用的电子管元件有许多明显缺点，如，在运行时产生的热量太多，可靠性较差，运算速度不快，价格昂贵，体积庞大，这些都使计算机发展受限。第二代电子计算机时代是从 1958 年到 1964 年，第二代电子计算机全部采用晶体管作为电子器件，其运算速度比第一代电子计算机的运算速度提高了近百倍，体积为原来的几十分之一。[1]</p><p>随着晶体管的发明，电子技术迎来了重大变革。晶体管相比于电子管，体积大幅缩小、功耗显著降低且可靠性增强。基于晶体管技术的 CPU 开始出现，像第二代计算机的 CPU 便采用了晶体管，这使得计算机的运算速度有了明显提升，而且计算机的体积也得以缩小，应用范围开始逐渐拓展到商业等更多领域，电子技术的这一进步让 CPU 在性能和适用性上迈出了重要的一步。</p><h3 id="集成电路时代的-GPU-变革"><a href="#集成电路时代的-GPU-变革" class="headerlink" title="集成电路时代的 GPU 变革"></a>集成电路时代的 GPU 变革</h3><p>集成电路的诞生更是电子技术发展的一座里程碑。它将众多的晶体管等元件集成到一块小小的芯片上，极大地提高了电子元件的集成度。当 CPU 开始采用集成电路技术后，性能得到了质的飞跃。例如，英特尔公司早期推出的基于集成电路的 CPU 产品，能够在更小的空间内实现更复杂的运算逻辑，使得计算机的处理能力大大增强，运算速度成倍增长，并且计算机的体积进一步缩小，成本也有所降低，个人计算机开始逐渐走入普通家庭，这一切都得益于集成电路这种电子技术成果对 CPU 的重塑。</p><p>集成电路下，原本庞大的计算机处理中心转化为一小块的芯片，使得计算机的体积进一步减小，以英特尔为代表的一些芯片公司得到发展，个人便携式计算机逐渐问世。</p><p>集成电路的发展导致了两个效应：一方面，晶体管的面积要求减小了，因此可以在芯片上容纳更多的晶体管（集成度提高），从而在同样的芯片面积上实现更多的功能。另一方面，晶体管的开关速度更快，因此电路可以以更高的时钟频率运行，进而提高了计算能力。[2]</p><h3 id="超大规模集成电路下的-CPU-现状"><a href="#超大规模集成电路下的-CPU-现状" class="headerlink" title="超大规模集成电路下的 CPU 现状"></a>超大规模集成电路下的 CPU 现状</h3><p>如今，我们处于超大规模集成电路的时代，在一块 CPU 芯片上可以集成数以亿计的晶体管。电子技术在微纳加工等方面不断精进，使得 CPU 的制程越来越小，比如已经从早期的微米级别发展到如今的纳米级别。这不仅让 CPU 的运算速度达到了惊人的程度，而且在多核心、多线程等技术方面也不断突破，能够同时处理海量的复杂任务，计算机的性能也随之达到了前所未有的高度，满足了当下人们在人工智能、大数据处理等众多领域对高性能计算的需求。</p><p>如今状态下，计算机的芯片晶体管密度可以达到 180 亿次，设计制程可以达到 3nm 水平，全球诞生了一系列的芯片设计公司如 Apple 公司，海思芯片公司等，还有许多的芯片制造公司，如台积电公司，荷兰阿斯麦公司。</p><p>同时，超大规模集成电路下的 CPU，也就是我们俗称的芯片，伴随着晶体管密度的上升，算力不断提升，为将来的人工智能，大数据等科学的发展做了很多的铺垫。</p><h3 id="新时代下-CPU-的发展趋势"><a href="#新时代下-CPU-的发展趋势" class="headerlink" title="新时代下 CPU 的发展趋势"></a>新时代下 CPU 的发展趋势</h3><p>虽然说目前的的芯片晶体管的密度十分高，算力十分强，但是仍然有许多的不足，比如目前的生成式人工智能愈发流行，很多模型的训练需要耗费大量的算力，这当然可以通过 GPU 来进行弥补，但是很多时候，CPU 的性能仍然需要不断提升，才能够提高兼容性，许多计算机面临着内置集成 AI 的需求，这对于 CPU 的性能要求就更高了。所以，目前有很多的新的发展趋势，</p><p>芯粒设计和芯片三维堆叠系统的集成技术，是未来算力提升过程中工艺实现的手段和方法。芯粒和传统的裸芯片区别巨大。芯粒是一种特殊的裸芯片，它有特定功能和标准互连结构多个芯粒可以在在封装级进行组合并形成完整的微系统。这需要从“复用”的角度来考虑这一问题，芯粒单一使用次数相对而言比较多的，但还没有达到“复用”模式。多芯粒具有集成优势，用成熟工艺来实现芯粒可以有效降低成本。基于芯粒的集成并不依照摩尔定律只追求高功率线宽，第二个更小的裸芯片面积更小，对良率的提升具有非常大的价值。[3]</p><p>所以按照目前的趋势来看，芯片（CPU）的发展会向着多芯粒的方向不断发展。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总结来看电子技术对于计算机发展的推动十分明显，无论是从存储器，显示器，还是本文所聚焦的中央处理器，本文所聚焦的中央处理器，是计算机运算的核心，从第一代的电子管到后来的晶体管，以及后来的高密度的晶体管，到未来可能会有希望出现的芯粒设计和芯片堆叠，无不展现了 CPU 对于计算机的重要影响。</p><p>在未来，更多新兴的电子技术肯定还会在其他方面继续影响电子计算机的发展，甚至可能会对计算机的形态和运算原理产生深远影响，所以我们一定要关于电子技术，并及时在计算机领域运用相关技术。</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>[1]俞望年.电子计算机的出现与发展(下)[J].少儿科技,2021,(Z2):72-73.<br>[2]吴川斌.飞跃 80 年：计算机的诞生与发展[J].中国工业和信息化,2024,(12):68-73.DOI:10.19609&#x2F;j.cnki.cn10-1299&#x2F;f.2024.12.002.<br>[3]黄思维.后摩尔时代芯片算力提升的途径[J].高科技与产业化,2022,28(01):58-61.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;电子计技术对于计算机发展的推动——以中央处理器（CPU）为例&quot;&gt;&lt;a href=&quot;#电子计技术对于计算机发展的推动——以中央处理器（CPU）为例&quot; class=&quot;headerlink&quot; title=&quot;电子计技术对于计算机发展的推动——以中央处理器（CPU）为例&quot;&gt;</summary>
      
    
    
    
    <category term="电子技术" scheme="http://example.com/categories/%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/"/>
    
    
    <category term="电子技术" scheme="http://example.com/tags/%E7%94%B5%E5%AD%90%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>post2</title>
    <link href="http://example.com/posts/8986cbfc/"/>
    <id>http://example.com/posts/8986cbfc/</id>
    <published>2025-01-13T03:25:32.000Z</published>
    <updated>2025-01-13T09:01:57.987Z</updated>
    
    <content type="html"><![CDATA[<h2 id="post2"><a href="#post2" class="headerlink" title="post2"></a>post2</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;post2&quot;&gt;&lt;a href=&quot;#post2&quot; class=&quot;headerlink&quot; title=&quot;post2&quot;&gt;&lt;/a&gt;post2&lt;/h2&gt;</summary>
      
    
    
    
    <category term="随笔" scheme="http://example.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一篇博客</title>
    <link href="http://example.com/posts/0/"/>
    <id>http://example.com/posts/0/</id>
    <published>2025-01-12T04:00:00.000Z</published>
    <updated>2025-01-13T04:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h2><p>这是我的第一篇博客，欢迎大家来阅读！</p><p>经过了九九八十一难，我终于短暂地建立了本站，虽然目前上有很多的地方不完善，终归已经有了眉目，谢谢大家的关注</p><p>我以后会不断地完善本站，并尽可能地将自己的心得体会，创作记录在本站上，有需要或者感兴趣的同学朋友，可以参考学习</p><p>希望我们能够共同进步，也欢迎各位同学朋友积极留言。</p><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;第一篇博客&quot;&gt;&lt;a href=&quot;#第一篇博客&quot; class=&quot;headerlink&quot; title=&quot;第一篇博客&quot;&gt;&lt;/a&gt;第一篇博客&lt;/h2&gt;&lt;p&gt;这是我的第一篇博客，欢迎大家来阅读！&lt;/p&gt;
&lt;p&gt;经过了九九八十一难，我终于短暂地建立了本站，虽然目前上有很多的地方不完善，终归已经有了眉目，谢谢大家的关注&lt;/p&gt;
&lt;p&gt;我以后会不断地完善本站，并尽可能地将自己的心得体会，创作记录在本站上，有需要或者感兴趣的同学朋友，可以参考学习&lt;/p&gt;
&lt;p&gt;希望我们能够共同进步，也欢迎各位同学朋友积极留言。&lt;/p&gt;</summary>
    
    
    
    <category term="大学" scheme="http://example.com/categories/%E5%A4%A7%E5%AD%A6/"/>
    
    
    <category term="学习" scheme="http://example.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/posts/4a17b156/"/>
    <id>http://example.com/posts/4a17b156/</id>
    <published>2025-01-09T15:25:14.245Z</published>
    <updated>2025-01-13T09:02:03.203Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is my very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is my very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for m</summary>
      
    
    
    
    
  </entry>
  
</feed>
